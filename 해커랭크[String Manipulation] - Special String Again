# Algorithm

###### Special String Again (특수문자열 구하기)

- 앞뒤가 같은 문자열체크
- 가운데 문자를 제거했을 때 모두 같은 문자열인지


```c
func substrCount(n: Int, s: String) -> Int {
    let arr = s.map { String($0) }
    var count = 0
    for i in 0..<arr.count {
        for j in i+1..<arr.count {
            var ar1 = Array(arr[i...j])
            if ar1.count % 2 == 0 {
                let set = Set<String>(ar1)
                if set.count == 1 {
                    count += 1
                }
            } else {
                let middleIndex = ar1.count / 2
                ar1.remove(at: middleIndex)
                let set = Set<String>(ar1)
                if set.count == 1 {
                    count += 1
                }
            }
        }
    }
    return count + arr.count
}
```
print(substrCount(n: 5, s: "asasd"))
-> a부터시작해서 짝수개 / 홀수개를 구분하여 set에 넣었을때 count가 1이면 모두 같은 문자열이라고 판단하여 구현함
-> as -> asa -> asas -> asasd 
-> sa -> sas -> sasd 이런식으로 하지만 역시나 ....... 밑에는 유툽에서 java로 풀이해놓은걸 swift로 변경


수정본: 정렬을 먼저 해주고 현재꺼와 바로 옆에껏만 비교해주면 된다.

```c
func substrCount(n: Int, s: String) -> Int {
    let arr = s.map { String($0) }
    var count = 0

    for i in 0..<arr.count {
        count += 1 //문자가 1개일때는 무조건 포함이 되기때문에 일단 기본으로 문자열의 count갯수는 포함
        for j in i+1..<arr.count {
            if arr[i] != arr[j] {
                if (2 * j - i < arr.count) && (arr[i..<j].joined() == arr[j+1..<2 * j - i + 1].joined()) {
                //이게 문제인데 현재 j의 값이 중간값이라고 생각하고 arr을 j중간값을 제외한 앞뒤 문자열의 값을 가지고 와서 같으면 count += 1
                    count += 1
                    break
                } else {
                    break
                }
            } else {
                count += 1 //앞뒤 문자열이 같으면 포함이기때문에 count += 1
            }
        }
    }

    return count
}
```
